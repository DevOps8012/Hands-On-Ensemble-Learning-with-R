ab1 <- boosting(y~.,data=toy,boos=FALSE,mfinal = 1,
maxdepth=1,minsplit=1,minbucket=1)
margins(ab1,newdata=toy)
ab2 <- boosting(y~.,data=toy,boos=FALSE,mfinal = 2,
maxdepth=1,minsplit=1,minbucket=2)
margins(ab2,newdata=toy)
ab3 <- boosting(y~.,data=toy,boos=FALSE,mfinal = 3,
maxdepth=1,minsplit=1,minbucket=2)
margins(ab3,newdata=toy)
ab5 <- boosting(y~.,data=toy,boos=FALSE,mfinal = 5,
maxdepth=1,minsplit=1,minbucket=2)
margins(ab5,newdata=toy)
ab10 <- boosting(y~.,data=toy,boos=FALSE,mfinal = 10,
maxdepth=1,minsplit=1,minbucket=2)
margins(ab10,newdata=toy)
ab50 <- boosting(y~.,data=toy,boos=FALSE,mfinal = 50,
maxdepth=1,minsplit=1,minbucket=2)
margins(ab50,newdata=toy)
ab1 <- boosting(y~.,data=toy,boos=TRUE,mfinal = 1,
maxdepth=1,minsplit=1,minbucket=1)
margins(ab1,newdata=toy)
ab2 <- boosting(y~.,data=toy,boos=TRUE,mfinal = 2,
maxdepth=1,minsplit=1,minbucket=2)
margins(ab2,newdata=toy)
ab5 <- boosting(y~.,data=toy,boos=TRUE,mfinal = 5,
maxdepth=1,minsplit=1,minbucket=2)
margins(ab5,newdata=toy)
ab10 <- boosting(y~.,data=toy,boos=TRUE,mfinal = 10,
maxdepth=1,minsplit=1,minbucket=2)
margins(ab10,newdata=toy)
ab50 <- boosting(y~.,data=toy,boos=TRUE,mfinal = 50,
maxdepth=1,minsplit=1,minbucket=2)
margins(ab50,newdata=toy)
predict(ab50)
predict(ab50,newdata=toy)
predict(ab50,newdata=toy[,1:2])$class
ab1 <- boosting(y~.,data=toy,boos=TRUE,mfinal = 1,
maxdepth=1,minsplit=1,minbucket=1)
margins(ab1,newdata=toy)
predict(ab1,newdata=toy[,1:2])$class
ab2 <- boosting(y~.,data=toy,boos=TRUE,mfinal = 2,
maxdepth=1,minsplit=1,minbucket=2)
margins(ab2,newdata=toy)
predict(ab2,newdata=toy[,1:2])$class
ab5 <- boosting(y~.,data=toy,boos=TRUE,mfinal = 5,
maxdepth=1,minsplit=1,minbucket=2)
margins(ab5,newdata=toy)
predict(ab5,newdata=toy[,1:2])$class
ab10 <- boosting(y~.,data=toy,boos=TRUE,mfinal = 10,
maxdepth=1,minsplit=1,minbucket=2)
margins(ab10,newdata=toy)
predict(ab10,newdata=toy[,1:2])$class
ab50 <- boosting(y~.,data=toy,boos=TRUE,mfinal = 50,
maxdepth=1,minsplit=1,minbucket=2)
margins(ab50,newdata=toy)
predict(ab50,newdata=toy[,1:2])$class
ab10$votes
ab10$weights
ab10$prob
ab10$importance
ab10$weights
spam_b1 <- boosting(spam_Formula,data=spam_Train,mfinal=1)
spam_b1$votes
spam_b1$votes
spam_b1$importance
spam_b1$votes
spam_b1 <- boosting(spam_Formula,data=spam_Train,mfinal=10)
spam_b1$votes
spam_b1$weights
margin(spam_b1)
margins(spam_b1)
margins(spam_b1,newdata=spam_Train)
tt <- margins(spam_b1,newdata=spam_Train)
tt$margins
mean(tt)
mean(tt$margins)
summary(margins(spam_b1,newdata=spam_Train))
summary(margins(spam_b1,newdata=spam_Train)$margins)
spam_b1 <- boosting(spam_Formula,data=spam_Train,mfinal=10)
mb1 <- margins(spam_b1,newdata=spam_Train)$margins
mb1[1:20]
summary()
summary(mb1)
spam_b1 <- boosting(spam_Formula,data=spam_Train,mfinal=5)
mb1 <- margins(spam_b1,newdata=spam_Train)$margins
mb1[1:20]
summary(mb1)
spam_b2 <- boosting(spam_Formula,data=spam_Train,mfinal=10)
mb2 <- margins(spam_b2,newdata=spam_Train)$margins
mb2[1:20]
summary(mb2)
predict(spam_b1)
predict(spam_b1,newdata=spam_Train)
predict(spam_b1,newdata=spam_Train)$class
sum(predict(spam_b1,newdata=spam_Train)$class==spam_Train$type)
sum(predict(spam_b1,newdata=spam_Train)$class==spam_Train$type)/nrow(spam_Train)
sum(predict(spam_b1,newdata=spam_Train)$class==
spam_Train$type)/nrow(spam_Train)
sum(predict(spam_b2,newdata=spam_Train)$class==
spam_Train$type)/nrow(spam_Train)
spam_b1 <- boosting(spam_Formula,data=spam_Train,mfinal=5)
sum(predict(spam_b1,newdata=spam_Train)$class==
spam_Train$type)/nrow(spam_Train)
mb1 <- margins(spam_b1,newdata=spam_Train)$margins
mb1[1:20]
summary(mb1)
spam_b2 <- boosting(spam_Formula,data=spam_Train,mfinal=10)
sum(predict(spam_b2,newdata=spam_Train)$class==
spam_Train$type)/nrow(spam_Train)
mb2 <- margins(spam_b2,newdata=spam_Train)$margins
mb2[1:20]
summary(mb2)
spam_b3 <- boosting(spam_Formula,data=spam_Train,mfinal=20)
sum(predict(spam_b3,newdata=spam_Train)$class==
spam_Train$type)/nrow(spam_Train)
mb3 <- margins(spam_b3,newdata=spam_Train)$margins
mb3[1:20]
summary(mb3)
spam_b1 <- boosting(spam_Formula,data=spam_Train,mfinal=5)
sum(predict(spam_b1,newdata=spam_Train)$class==
spam_Train$type)/nrow(spam_Train)
mb1 <- margins(spam_b1,newdata=spam_Train)$margins
mb1[1:20]
summary(mb1)
spam_b2 <- boosting(spam_Formula,data=spam_Train,mfinal=10)
sum(predict(spam_b2,newdata=spam_Train)$class==
spam_Train$type)/nrow(spam_Train)
mb2 <- margins(spam_b2,newdata=spam_Train)$margins
mb2[1:20]
summary(mb2)
spam_b3 <- boosting(spam_Formula,data=spam_Train,mfinal=20)
sum(predict(spam_b3,newdata=spam_Train)$class==
spam_Train$type)/nrow(spam_Train)
mb3 <- margins(spam_b3,newdata=spam_Train)$margins
mb3[1:20]
summary(mb3)
spam_b4<- boosting(spam_Formula,data=spam_Train,mfinal=50)
sum(predict(spam_b4,newdata=spam_Train)$class==
spam_Train$type)/nrow(spam_Train)
mb4 <- margins(spam_b4,newdata=spam_Train)$margins
mb4[1:20]
summary(mb4)
spam_b5<- boosting(spam_Formula,data=spam_Train,mfinal=200)
sum(predict(spam_b5,newdata=spam_Train)$class==
spam_Train$type)/nrow(spam_Train)
mb5 <- margins(spam_b5,newdata=spam_Train)$margins
mb5[1:20]
summary(mb5)
data("spam")
set.seed(12345)
Train_Test <- sample(c("Train","Test"),nrow(spam),replace = TRUE,prob = c(0.7,0.3))
spam_Train <- spam[Train_Test=="Train",]
spam_Formula <- as.formula("type~.")
View(cbind(mb1,mb2,mb3,mb4,mb5))
View(cbind(mb1,mb2,mb3,mb4,mb5)[mb1<0,])
spam_gbm <- gbm(spam_Formula,distribution="bernoulli",data=spam_Train2,
n.trees=500,bag.fraction = 0.8,shrinkage = 0.1)
plot.gbm(spam_gbm)
View(cbind(mb1,mb2,mb3,mb4,mb5)[mb1<0,])
spam_b0 <- boosting(spam_Formula,data=spam_Train,mfinal=1)
sum(predict(spam_b0,newdata=spam_Train)$class==
spam_Train$type)/nrow(spam_Train)
mb0 <- margins(spam_b0,newdata=spam_Train)$margins
mb0[1:20]
summary(mb0)
table(spam_Train$type)/nrow(spam_Train)
pbc_Exp <- gbm(Surv(time,status==2)~trt + age + sex + ascites +
hepato + spiders + edema + bili + chol + albumin +
copper + alk.phos + ast + trig + platelet +
protime + stage,
dist="coxph",data=pbc)
pbc_boost <- gbm(Surv(time,status==2)~trt + age + sex + ascites +
hepato + spiders + edema + bili + chol + albumin +
copper + alk.phos + ast + trig + platelet +
protime + stage,
dist="coxph",data=pbc)
pbc_boost <- gbm(Surv(time,status==2)~trt + age + sex + ascites +
hepato + spiders + edema + bili + chol + albumin +
copper + alk.phos + ast + trig + platelet +
protime + stage,n.trees=100,
dist="coxph",data=pbc)
summary(pbc_boost)
pbc_boost <- gbm(Surv(time,status==2)~trt + age + sex + ascites +
hepato + spiders + edema + bili + chol + albumin +
copper + alk.phos + ast + trig + platelet +
protime + stage,n.trees=100,
interaction.depth = 2,
dist="coxph",data=pbc)
summary(pbc_boost)
pbc_boost <- gbm(Surv(time,status==2)~trt + age + sex + ascites +
hepato + spiders + edema + bili + chol + albumin +
copper + alk.phos + ast + trig + platelet +
protime + stage,n.trees=100,
interaction.depth = 2,shrinkage=0.01,
dist="coxph",data=pbc)
summary(pbc_boost)
p <- read.csv("https://stats.idre.ucla.edu/stat/data/poisson_sim.csv")
preg <- read.csv("https://stats.idre.ucla.edu/stat/data/poisson_sim.csv")
preg <- within(preg, {
prog <- factor(prog, levels=1:3, labels=c("General", "Academic",
"Vocational"))
id <- factor(id)
})
summary(preg)
summary(m1 <- glm(num_awards ~ prog + math, family="poisson", data=p))
pboost <- gbm(num_awards~prog+math,dist="poisson",n.trees=100,
interaction.depth = 2,shrinkage=0.1)
preg <- read.csv("https://stats.idre.ucla.edu/stat/data/poisson_sim.csv")
preg <- within(preg, {
prog <- factor(prog, levels=1:3, labels=c("General", "Academic",
"Vocational"))
id <- factor(id)
})
summary(preg)
summary(m1 <- glm(num_awards ~ prog + math, family="poisson", data=preg))
pboost <- gbm(num_awards~prog+math,dist="poisson",n.trees=100,
interaction.depth = 2,shrinkage=0.1)
pboost <- gbm(num_awards ~ prog+math,dist="poisson",n.trees=100,
interaction.depth = 2,shrinkage=0.1,data=preg)
summary(pboost)
anova(pboos)
anova(pboost)
pboost$trees
preg$num_awards
predict(m1)
predict(m1,type="response")
predict(pboost)
fitted(pboost)
class(pboost)
predict(pboost,n.trees=100)
predict(pboost,n.trees=100,type="response")
cbind(preg$num_awards,predict(m1,type="response"),
predict(pboost,n.trees=100,type="response"))
sum(preg$num_awards-predict(m1,type="response"))^2
sum((preg$num_awards-predict(m1,type="response")^2))
sum((preg$num_awards-predict(m1,type="response"))^2)
sum((preg$num_awards-predict(m1,type="response"))^2)
sum((preg$num_awards-predict(pboost,n.trees=100,type="response"))^2)
plot(pbc_boost)
getTree(pbc_boost,10,labelVar = TRUE)
interact.gbm(pbc_boost)
interact.gbm(pbc_boost,pbc)
pretty.gbm.tree(pbc_boost,i.tree=1)
plot(pretty.gbm.tree(pbc_boost,i.tree=1))
class(pretty.gbm.tree(pbc_boost,i.tree=1))
to.dendrogram <- function(dfrep,rownum=1,height.increment=0.1){
if(dfrep[rownum,'status'] == -1){
rval <- list()
attr(rval,"members") <- 1
attr(rval,"height") <- 0.0
attr(rval,"label") <- dfrep[rownum,'prediction']
attr(rval,"leaf") <- TRUE
}else{##note the change "to.dendrogram" and not "to.dendogram"
left <- to.dendrogram(dfrep,dfrep[rownum,'left daughter'],height.increment)
right <- to.dendrogram(dfrep,dfrep[rownum,'right daughter'],height.increment)
rval <- list(left,right)
attr(rval,"members") <- attr(left,"members") + attr(right,"members")
attr(rval,"height") <- max(attr(left,"height"),attr(right,"height")) + height.increment
attr(rval,"leaf") <- FALSE
attr(rval,"edgetext") <- dfrep[rownum,'split var']
#To add Split Point in Dendrogram
#attr(rval,"edgetext") <- paste(dfrep[rownum,'split var'],"\n<",round(dfrep[rownum,'split point'], digits = 2),"=>", sep = " ")
}
class(rval) <- "dendrogram"
return(rval)
}
plot(to.dendrogram(pretty.gbm.tree(pbc_boost,i.tree = 1)))
pretty.gbm.tree(pbc_boost)
pretty.gbm.tree(pbc_boost,i.tree=2)
preg <- read.csv("https://stats.idre.ucla.edu/stat/data/poisson_sim.csv")
preg <- within(preg, {
prog <- factor(prog, levels=1:3, labels=c("General", "Academic",
"Vocational"))
id <- factor(id)
})
summary(preg)
summary(m1 <- glm(num_awards ~ prog + math, family="poisson", data=preg))
pboost <- gbm(num_awards ~ prog+math,dist="poisson",n.trees=100,
interaction.depth = 2,shrinkage=0.1,data=preg)
cbind(preg$num_awards,predict(m1,type="response"),
predict(pboost,n.trees=100,type="response"))
sum((preg$num_awards-predict(m1,type="response"))^2)
sum((preg$num_awards-predict(pboost,n.trees=100,type="response"))^2)
pregnancy <- read.csv("https://stats.idre.ucla.edu/stat/data/poisson_sim.csv")
# Poisson regression and boosting
# https://stats.idre.ucla.edu/r/dae/poisson-regression/
pregnancy <- read.csv("https://stats.idre.ucla.edu/stat/data/poisson_sim.csv")
pregnancy <- within(pregnancy, {
prog <- factor(prog, levels=1:3, labels=c("General", "Academic",
"Vocational"))
id <- factor(id)
})
summary(pregnancy)
pregnancy_Poisson <- glm(num_awards ~ prog + math,
family="poisson", data=pregnancy)
summary(pregnancy_Poisson)
pregnancy_boost <- gbm(num_awards ~ prog+math,dist="poisson",n.trees=100,
interaction.depth = 2,shrinkage=0.1,data=pregnancy)
cbind(pregnancy$num_awards,predict(m1,type="response"),
predict(pboost,n.trees=100,type="response"))
sum((pregnancy$num_awards-predict(m1,type="response"))^2)
sum((pregnancy$num_awards-predict(pboost,n.trees=100,type="response"))^2)
summary(pregnancy_boost)
windows(height=100,width=100)
summary(pregnancy_boost)
pretty.gbm.tree(pregnancy_boost,i.tree=18)
pretty.gbm.tree(pregnancy_boost,i.tree=63)
# Survival data
pbc_boost <- gbm(Surv(time,status==2)~trt + age + sex + ascites +
hepato + spiders + edema + bili + chol + albumin +
copper + alk.phos + ast + trig + platelet +
protime + stage,n.trees=100,
interaction.depth = 2,shrinkage=0.01,
dist="coxph",data=pbc)
summary(pbc_boost)
pretty.gbm.tree(pbc_boost,i.tree=2)
pretty.gbm.tree(pbc_boost,i.tree=72)
library(gbm)
library(xgboost)
library(ada)
library(adabag)
library(h2o)
library(kernlab)
data("spam")
set.seed(12345)
Train_Test <- sample(c("Train","Test"),nrow(spam),replace = TRUE,
prob = c(0.7,0.3))
spam_Train <- spam[Train_Test=="Train",]
spam_Formula <- as.formula("type~.")
spam_train$data <- spam_Train[,-"type"]
class(spam_train$data)
spam_train$data <- spam_Train
spam_train <- list()
spam_train$data <- spam_Train
spam_train$data$type
spam_train$data$type <- NULL
spam2 <- spam
spam2$type <- as.numeric(spam2$type)
table(spam2$type)
head(cbind(spam2$type,spam$type))
head(data.frame(spam2$type,spam$type))
table(spam$type)
set.seed(12345)
Train_Test <- sample(c("Train","Test"),nrow(spam2),replace = TRUE,
prob = c(0.7,0.3))
spam_Train <- spam2[Train_Test=="Train",]
spam_Formula <- as.formula("type~.")
spam_train$label <- spam2_Train$type
data("spam")
spam2 <- spam
spam2$type <- as.numeric(spam2$type)
head(data.frame(spam2$type,spam$type))
# 2 denotes spam, and 1 - nonspam
set.seed(12345)
Train_Test <- sample(c("Train","Test"),nrow(spam2),replace = TRUE,
prob = c(0.7,0.3))
spam2_Train <- spam2[Train_Test=="Train",]
spam_Formula <- as.formula("type~.")
spam_train <- list()
spam_train$data <- spam2_Train
spam_train$data$type <- NULL
spam_train$label <- spam2_Train$type
class(spam_train$data)
spam_xgb <- xgboost(data=spam_train$data,label=spam_train$label,
nrounds = 100,objective="binary:logistic")
spam_train$data <- as.matrix(spam2_Train)
spam_train$data$type <- NULL
spam_train <- list()
spam_train$data <- as.matrix(spam2_Train)
spam_train$data$type <- NULL
colnames(spam_train$data)
data("spam")
spam2 <- spam
spam2$type <- as.numeric(spam2$type)
head(data.frame(spam2$type,spam$type))
set.seed(12345)
Train_Test <- sample(c("Train","Test"),nrow(spam2),replace = TRUE,
prob = c(0.7,0.3))
spam2_Train <- spam2[Train_Test=="Train",]
spam_Formula <- as.formula("type~.")
spam_train <- list()
names(spam2_Train)
spam_train$data <- as.matrix(spam2_Train[,-58])
colnames(spam_train$data) <- names(spam)[-58]
spam_train$label <- spam2_Train$type
class(spam_train$data)
spam_xgb <- xgboost(data=spam_train$data,label=spam_train$label,
nrounds = 100,objective="binary:logistic")
data("spam")
spam2 <- spam
spam2$type <- as.numeric(spam2$type)-1
head(data.frame(spam2$type,spam$type))
# 1 denotes spam, and 0 - nonspam
set.seed(12345)
Train_Test <- sample(c("Train","Test"),nrow(spam2),replace = TRUE,
prob = c(0.7,0.3))
spam2_Train <- spam2[Train_Test=="Train",]
spam_Formula <- as.formula("type~.")
spam_train <- list()
spam_train$data <- as.matrix(spam2_Train[,-58])
colnames(spam_train$data) <- names(spam)[-58]
spam_train$label <- spam2_Train$type
class(spam_train$data)
spam_xgb <- xgboost(data=spam_train$data,label=spam_train$label,
nrounds = 100,objective="binary:logistic")
xgb_predict <- predict(spam_xgb,spam_train$data)
table(xgb_predict,spam_train$label)
xgb_predict <- predict(spam_xgb,spam_train$data,type="class")
table(xgb_predict,spam_train$label)
xgb_predict <- predict(spam_xgb,spam_train$data)
plot(spam_train$label,xgb_predict)
boxplot(spam_train$label,xgb_predict)
boxplot(xgb_predict~spam_train$label)
plot(spam_train$label,xgb_predict)
boxplot(xgb_predict~spam_train$label)
spam_xgb <- xgb.cv(data=spam_train$data,label=spam_train$label,
nfold=10,nrounds = 100,objective="binary:logistic")
# Simple XGBoosting
spam_xgb <- xgboost(data=spam_train$data,label=spam_train$label,
nrounds = 100,objective="binary:logistic")
xgb_predict <- predict(spam_xgb,spam_train$data)
boxplot(xgb_predict~spam_train$label)
# XGBoosting with cross-validation
spam_xgb_cv <- xgb.cv(data=spam_train$data,label=spam_train$label,
nfold=10,nrounds = 100,objective="binary:logistic")
xgb_cv_predict <- predict(spam_xgb_cv,spam_train$data)
spam_xgb_cv <- xgb.cv(data=spam_train$data,label=spam_train$label,
nfold=10,nrounds = 100,objective="binary:logistic",
prediction = TRUE)
xgb_cv_predict <- spam_xgb_cv$pred
xgb_cv_predict
plot(xgb_predict,xgb_cv_predict)
sum(xgb_predict>0.5)
sum(spam_train$label)
table(spam_train$label,c(xgb_predict>0.5))
table(spam_train$label,c(xgb_cv_predict>0.5))
spam_xgb_cv2 <- xgb.cv(data=spam_train$data,label=spam_train$label,
early.stop.round = 5,
nfold=10,nrounds = 100,objective="binary:logistic",
prediction = TRUE)
spam_xgb_cv2 <- xgb.cv(data=spam_train$data,label=spam_train$label,
early_stopping_rounds = 5,
nfold=10,nrounds = 100,objective="binary:logistic",
prediction = TRUE)
xgb.plot.importance(spam_xgb)
xgb.importance(spam_xgb)
xgb.importance(names(spam_train$data,spam_xgb)
)
xgb.importance(names(spam_train$data),spam_xgb)
xgb.plot.importance(xgb.importance(names(spam_train$data),spam_xgb))
xgb.plot.importance(xgb.importance(names(spam_train$data),spam_xgb)[1:10,])
xgboost(spam_xgb,nrounds = 10)
xgboost(xgb_model=spam_xgb,nrounds = 10)
xgboost(xgb_model=spam_xgb,
data=spam_train$data,label=spam_train$label,
nrounds = 10)
## The xgboost Package
data("spam")
spam2 <- spam
spam2$type <- as.numeric(spam2$type)-1
head(data.frame(spam2$type,spam$type))
# 1 denotes spam, and 0 - nonspam
set.seed(12345)
Train_Test <- sample(c("Train","Test"),nrow(spam2),replace = TRUE,
prob = c(0.7,0.3))
spam2_Train <- spam2[Train_Test=="Train",]
spam_Formula <- as.formula("type~.")
spam_train <- list()
spam_train$data <- as.matrix(spam2_Train[,-58])
colnames(spam_train$data) <- names(spam)[-58]
spam_train$label <- spam2_Train$type
class(spam_train$data)
# Simple XGBoosting
spam_xgb <- xgboost(data=spam_train$data,label=spam_train$label,
nrounds = 100,objective="binary:logistic")
xgb_predict <- predict(spam_xgb,spam_train$data)
sum(xgb_predict>0.5)
sum(spam_train$label)
table(spam_train$label,c(xgb_predict>0.5))
# XGBoosting with cross-validation
spam_xgb_cv <- xgb.cv(data=spam_train$data,label=spam_train$label,
nfold=10,nrounds = 100,objective="binary:logistic",
prediction = TRUE)
xgb_cv_predict <- spam_xgb_cv$pred
sum(xgb_cv_predict>0.5)
table(spam_train$label,c(xgb_cv_predict>0.5))
# Stop early
spam_xgb_cv2 <- xgb.cv(data=spam_train$data,label=spam_train$label,
early_stopping_rounds = 5,
nfold=10,nrounds = 100,objective="binary:logistic",
prediction = TRUE)
# Continue training
xgboost(xgb_model=spam_xgb,
data=spam_train$data,label=spam_train$label,
nrounds = 10)
# Variable Importance
xgb.plot.importance(xgb.importance(names(spam_train$data),
spam_xgb)[1:10,])
windows(height=100,width=100)
# Variable Importance
xgb.plot.importance(xgb.importance(names(spam_train$data),
spam_xgb)[1:10,])
xgb.plot.tree(feature_names = spam_train$data@Dimnames[[2]],
model = spam_xgb)
library(DiagrammeR)
detach(glue)
detach("glue")
library(DiagrammeR)
xgb.plot.tree(feature_names = spam_train$data@Dimnames[[2]],
model = spam_xgb)
install.packages("C:/Users/tprabhan/Downloads/glue_1.2.0.zip", repos = NULL, type = "win.binary")
library(DiagrammeR)
